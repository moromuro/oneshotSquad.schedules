{"version":3,"sources":["App.js","components/gameTable.js","index.js","components/test.js","components/calculateTimer.js"],"names":["App","props","state","time","hours","minutes","seconds","milliseconds","startTime","timer","duration","startTimer","start","bind","nextGame","GAMES","parseInt","Math","floor","toString","padStart","this","Date","now","date","getTime","window","setInterval","run","diff","remaining","setState","msToTime","clearTimeout","className","toLocaleString","dateStyle","timeStyle","Intl","DateTimeFormat","resolvedOptions","timeZone","players","description","id","renderGameTable","style","height","React","Component","hot","module","GameTable","rows","forEach","game","index","push","renderInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1ff52b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-grid-system';\r\nimport { hot } from 'react-hot-loader';\r\nimport './App.css';\r\n\r\nimport GameTable from './components/gameTable';\r\nimport Test from './components/test';\r\nimport CalculateTimer from './components/calculateTimer';\r\nimport GAMES from './games.json';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            time: {\r\n                hours: 0,\r\n                minutes: 0,\r\n                seconds: 0,\r\n                milliseconds: 0,\r\n            },\r\n            startTime: 0,\r\n            timer: null,\r\n            duration: 2 * 60 * 1000,\r\n        }\r\n        this.startTimer = this.start.bind(this);\r\n        // this.nextGame = {\r\n        //     date: new Date('2021-07-27T20:15:00'),\r\n        //     players: 'Player1, player2, player3',\r\n        //     description: 'lirum larm',\r\n        // }\r\n        this.nextGame = GAMES[0];\r\n    }\r\n\r\n    msToTime(duration) {\r\n        let milliseconds = parseInt((duration % 1000));\r\n        let seconds = Math.floor((duration / 1000) % 60);\r\n        let minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n        let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n    \r\n        hours = hours.toString().padStart(2, '0');\r\n        minutes = minutes.toString().padStart(2, '0');\r\n        seconds = seconds.toString().padStart(2, '0');\r\n        milliseconds = milliseconds.toString().padStart(3, '0');\r\n    \r\n        return {\r\n          hours,\r\n          minutes,\r\n          seconds,\r\n          milliseconds\r\n        };\r\n    }\r\n\r\n    start() {\r\n        if (!this.state.timer) {\r\n            this.state.startTime = Date.now();\r\n            // console.log(this.state.startTime.getTime());\r\n            this.state.duration = new Date(this.nextGame.date).getTime() -  Date.now();\r\n            this.timer = window.setInterval(() => this.run(), 1000);\r\n\r\n        }\r\n    }\r\n\r\n    run() {\r\n        // console.log('start time ',this.state.startTime);\r\n        const diff = Date.now() - this.state.startTime;\r\n        // console.log('diff', diff);\r\n\r\n        // If you want to count up\r\n        // this.setState(() => ({\r\n        //  time: this.msToTime(diff)\r\n        // }));\r\n        \r\n        // count down\r\n        let remaining = this.state.duration - diff;\r\n        // const nextGameTime = this.nextGame.date.getTime();\r\n        // console.log(nextGameTime);\r\n\r\n        // let remaining = nextGameTime - Date.now();\r\n        // console.log('remaining ', remaining);\r\n\r\n        if (remaining < 0) {\r\n          remaining = 0;\r\n        }\r\n        \r\n        this.setState(() => ({\r\n          time: this.msToTime(remaining)\r\n        }));\r\n\r\n        if (remaining === 0) {\r\n          window.clearTimeout(this.timer);\r\n          this.timer = null;\r\n        }\r\n    }\r\n\r\n    renderGameTable() {\r\n        return(\r\n            <GameTable />\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                {this.startTimer()}\r\n                <div className=\"description-header card\">\r\n                    <h1>ONESHOT SQUAD</h1>\r\n                    <p>Games listed under are fanmade and updated at random times.</p>\r\n                    <p>With issues regarding games, contact Moro on the discord channel.</p>\r\n                    <h3>Ths site is still very much WIP and backend guy is in charge of design as you can see. :suffer:</h3>\r\n                </div>\r\n                <div className=\"timer card\">\r\n                    <div className=\"bigTimerCard\">\r\n                        <p className=\"bigTimerLabel\">Next Game in</p>\r\n                        <p className=\"bigTimer\">\r\n                            <strong>\r\n                                {this.state.time.hours} : {this.state.time.minutes} : {this.state.time.seconds}\r\n                            </strong>\r\n                        </p>\r\n                    </div>\r\n                    \r\n                    <br></br>\r\n                    <p className=\"timerText\"><strong>{new Date(this.nextGame.date).toLocaleString('en-gb', { dateStyle: 'medium', timeStyle: 'long'})}</strong></p>\r\n                    <span className=\"infoText\">Your timezone: {Intl.DateTimeFormat().resolvedOptions().timeZone}</span>\r\n                    <br></br>\r\n                    <p className=\"timerText\">{this.nextGame.date.toString('en-gb')}</p>\r\n                    <span className=\"infoText\">UTC time</span>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <p>Players</p>\r\n                    <p>{this.nextGame.players}</p>\r\n                    <br></br>\r\n                    <p>Description</p>\r\n                    <p>{this.nextGame.description}</p>\r\n                    <br></br>\r\n                </div>\r\n\r\n                <div className=\"gameList\">\r\n                    <div className=\"middleBreak\">\r\n                        <h2 id=\"comingGames\">Coming games</h2>\r\n                    </div>\r\n                    {this.renderGameTable()}\r\n                </div>\r\n                <div style={{ height: '100px' }} />\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default hot(module)(App);\r\n","import React from 'react';\r\nimport './gameTable.css';\r\n\r\nimport GAMES from '../games.json';\r\n\r\nclass GameTable extends React.Component {\r\n\r\n    renderInfo() {\r\n        const rows = [];\r\n        GAMES.forEach((game, index) => {\r\n            rows.push(\r\n                <div key={index} className=\"gameCard\">\r\n                    <h2 className=\"userTime\">{new Date(game.date).toLocaleString('en-gb', { dateStyle: 'medium', timeStyle: 'medium'})}</h2>\r\n                    <p>{game.date.toString('en-gb', { dateStyle: 'medium', timeStyle: 'medium'})}</p>\r\n                    <p>{game.players}</p>\r\n                    <p>{game.description}</p>\r\n                </div>\r\n            );\r\n        })\r\n        \r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gameTable\">\r\n                {this.renderInfo()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameTable;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.js\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","import React from 'react';\r\n\r\n\r\nclass Test extends React.Component {\r\n    render() {\r\n        return (\r\n            <p>{this.props.name}</p>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Test;\r\n","import React, { Component, useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass CalculateTimer extends Component {\r\n    static propTypes = {\r\n        dateFrom: PropTypes.string,\r\n    }\r\n\r\n  \r\n\r\n    // calcDiffInMinutes(dateA, dateB){\r\n    //     return Math.floor(((dateA.getTime() - dateB.getTime()) / 1000) % 60);\r\n    // }\r\n    \r\n    // calculateDiff(dateFrom) {\r\n    //     const [currentDate, setCurrentDate] = useState(new Date());\r\n    //     const [minutesDiff, setMinutesDiff] = useState(\r\n    //         calcDiffInMinutes(currentDate, dateFrom)\r\n    //     );\r\n    \r\n    //     useEffect(() => {\r\n    //         const timeoutId = setTimeout(() => {\r\n    //             setCurrentDate(new Date());\r\n    //         }, 1000);\r\n    \r\n    //         return () => clearTimeout(timeoutId);\r\n    //     }, [currentDate]);\r\n    \r\n    //     useEffect(() => {\r\n    //         setMinutesDiff(calcDiffInMinutes(currentDate, dateFrom));\r\n    //     }, [currentDate, dateFrom]);\r\n    \r\n    //     return (\r\n    //         <div>\r\n    //             <div>Date From: {this.props.dateFrom.toISOString()}</div>\r\n    //             <div>CountDown value: {minutesDiff}</div>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n    renderEvents() {\r\n\r\n    }\r\n\r\n    render() {\r\n        // const minutesDiff = this.calculateDiff(this.props.dateFrom);\r\n        \r\n        \r\n        \r\n        console.log('hephep ');\r\n        console.log(this.props.dateFrom);\r\n        \r\n        return (\r\n            // <script>{this.calculateDiff(this.props.dateFrom)}</script>\r\n            <div>\r\n                <div>Date From: {this.props.dateFrom.toISOString()}</div>\r\n                <div>CountDown value: {minutesDiff}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculateTimer;\r\n"],"sourceRoot":""}